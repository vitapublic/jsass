plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'org.ajoberstar.grgit' version '1.6.0'
    id 'org.sonarqube' version '2.2.1'
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'signing'

import org.ajoberstar.grgit.*

group = 'io.bit3'
description = 'SASS compiler using libsass.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    manifest {
        attributes 'Implementation-Title': 'jsass',
                'Implementation-Version': version
    }
}

// Pinned to checkstyle 6.7 because newer versions are incompatible with gradle <=2.6
// https://issues.gradle.org/browse/GRADLE-3314
checkstyle {
    toolVersion = "6.7"
}

pmd {
    toolVersion = "4.3"
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

repositories {
    mavenLocal()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sonarqube {
    properties {
        def git = Grgit.open();
        def description = git.describe()

        property "sonar.exclusions", "**/src/main/libsass/**"
        property "sonar.projectVersion", description
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

// jni header generation
task jniHeaders(type:Exec) {
    def mainClasspath = sourceSets.main.output.classesDir
    commandLine "javah", "-classpath", mainClasspath, "-d", "src/main/c", "-jni", "-force", "io.bit3.jsass.adapter.NativeAdapter"

    def testClasspath = sourceSets.test.output.classesDir
    commandLine "javah", "-classpath", testClasspath, "-d", "src/test/c", "-jni", "-force", "io.bit3.jsass.adapter.NativeTestAdapter"

    dependsOn classes
    dependsOn testClasses
}
jar.dependsOn jniHeaders

// javadoc.jar generation
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// sources.jar generation
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// summarize artifacts
artifacts {
    archives javadocJar, sourceJar
}

// signing artifacts
if (project.hasProperty("signing.keyId") && project.hasProperty("signing.password")) {
    signing {
        sign configurations.archives
    }
}

apply from: 'maven.gradle'

// -----------------------------------------------------------------------------

def isVerbose() {
    def logLevel = gradle.startParameter.logLevel
    return LogLevel.INFO == logLevel || LogLevel.DEBUG == logLevel
}

task determineUid() {
    project.ext['uid'] = 0

    doLast {
        def user = System.getProperty("user.name")
        def output = new ByteArrayOutputStream();
        exec {
            commandLine 'id', '-u', user
            standardOutput = output
        }
        project.ext['uid'] = output.toString().trim()
    }
}

task determineGid() {
    project.ext['gid'] = 0

    doLast {
        def user = System.getProperty("user.name")
        def output = new ByteArrayOutputStream();
        exec {
            commandLine 'id', '-g', user
            standardOutput = output
        }
        project.ext['gid'] = output.toString().trim()
    }
}

task determineCurrentWorkingDirectory() {
    project.ext['cwd'] = '/'

    doLast {
        project.ext['cwd'] = new File('.').absolutePath
    }
}

task determineRepositoryHeadStability() {
    def repo = org.ajoberstar.grgit.Grgit.open(project.file('.'))

    project.ext['headIsUpstream'] = true

    doLast {
        def branch = repo.branch.getCurrent()

        if (branch) {
            branch = branch.getName()
        }

        if (!branch || 'HEAD' == branch) {
            def tag = repo.describe()

            project.ext['headIsUpstream'] = !(tag =~ /^\d+(\.\d+)+$/)
        } else {
            project.ext['headIsUpstream'] = 'master' != branch
        }
    }
}

task determineDockerAvailable() {
    doLast {
        def execResult = exec {
            commandLine 'docker', '--version'
            ignoreExitValue = true
            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
        }

        if (execResult.exitValue != 0) {
            throw new GradleException("Docker is required to run this task")
        }
    }
}

def runDockerContainer(name) {
    def type = 'stable'

    if (headIsUpstream) {
        type = 'latest'
    }

    def output = new ByteArrayOutputStream()
    def execResult = exec {
        workingDir cwd
        commandLine 'docker', 'run', "--user=$uid:$gid", '--rm', '-v', "$cwd:/jsass", "bit3/jsass-$name:$type"

        if (!isVerbose()) {
            standardOutput = output
            errorOutput = output
            ignoreExitValue = true
        }
    }

    if (execResult.exitValue != 0) {
        throw new GradleException("Docker run failed\n" + output.toString())
    }
}

def buildDockerContainer(name) {
    def output = new ByteArrayOutputStream()
    def execResult = exec {
        workingDir "src/main/docker/$name"
        commandLine 'docker', 'build', '-t', "bit3/jsass-$name:latest", '.'

        if (!isVerbose()) {
            standardOutput = output
            errorOutput = output
            ignoreExitValue = true
        }
    }

    if (execResult.exitValue != 0) {
        throw new GradleException("Docker build failed\n" + output.toString())
    }
}

// -----------------------------------------------------------------------------

// Build native libs
task buildNativeLibs {
    dependsOn 'buildNativeDarwin64Libs',
              'buildNativeLinux32Libs',
              'buildNativeLinux64Libs',
              'buildNativeWindows32Libs',
              'buildNativeWindows64Libs'
}

task buildNativeDarwin64Libs {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for darwin x64'
        runDockerContainer('build-darwin-x64')
    }
}

task buildNativeLinux32Libs {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for linux x32'
        runDockerContainer('build-linux-x32')
    }
}

task buildNativeLinux64Libs {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for linux x64'
        runDockerContainer('build-linux-x64')
    }
}

task buildNativeWindows32Libs {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for windows x32'
        runDockerContainer('build-windows-x32')
    }
}

task buildNativeWindows64Libs {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Build native libs for windows x64'
        runDockerContainer('build-windows-x64')
    }
}

// -----------------------------------------------------------------------------

// Run docker tests
task runDockerTests {
    dependsOn 'runDockerTestCentOS5x32',
              'runDockerTestCentOS5x64',
              'runDockerTestCentOS6x32',
              'runDockerTestCentOS6x64',
              'runDockerTestCentOS7',
              'runDockerTestUbuntu1204',
              'runDockerTestUbuntu1404'
}

task runDockerTestCentOS5x32 {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker CentOS 5 test container'
        runDockerContainer('test-centos5-x32')
    }
}

task runDockerTestCentOS5x64 {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker CentOS 5 test container'
        runDockerContainer('test-centos5-x64')
    }
}

task runDockerTestCentOS6x32 {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker CentOS 6 test container'
        runDockerContainer('test-centos5-x32')
    }
}

task runDockerTestCentOS6x64 {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker CentOS 6 test container'
        runDockerContainer('test-centos5-x64')
    }
}

task runDockerTestCentOS7 {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker CentOS 7 test container'
        runDockerContainer('test-centos5')
    }
}

task runDockerTestUbuntu1204 {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker ubuntu 12.04 test container'
        runDockerContainer('test-ubuntu12.04')
    }
}

task runDockerTestUbuntu1404 {
    dependsOn determineUid, determineGid, determineCurrentWorkingDirectory, determineRepositoryHeadStability, determineDockerAvailable

    doLast {
        println 'Run Docker ubuntu 14.04 test container'
        runDockerContainer('test-ubuntu14.04')
    }
}

// -----------------------------------------------------------------------------

// Build docker images tasks
// Note: these tasks are only for local development purpose,
// all containers are available on Docker Hub too!
task buildDocker {
    dependsOn 'buildDockerBuildDarwin64',
              'buildDockerBuildLinux64',
              'buildDockerBuildLinux32', // depends on buildDockerBuildLinux64
              'buildDockerBuildWindows32',
              'buildDockerBuildWindows64',
              'buildDockerTestCentOS5x32',
              'buildDockerTestCentOS5x64',
              'buildDockerTestCentOS6x32',
              'buildDockerTestCentOS6x64',
              'buildDockerTestCentOS7',
              'buildDockerTestUbuntu1204',
              'buildDockerTestUbuntu1404'
}

task buildDockerBuildDarwin64 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker Darwin build container'
        buildDockerContainer('build-darwin-x64')
    }
}

task buildDockerBuildLinux64 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker Linux build container'
        buildDockerContainer('build-linux-x64')
    }
}

task buildDockerBuildLinux32 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker Linux build container'
        buildDockerContainer('build-linux-x32')
    }
}

task buildDockerBuildWindows32 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker Linux build container'
        buildDockerContainer('build-windows-x32')
    }
}

task buildDockerBuildWindows64 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker Linux build container'
        buildDockerContainer('build-windows-x64')
    }
}

task buildDockerTestCentOS5x32 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker CentOS 5 test container'
        buildDockerContainer('test-centos5-x32')
    }
}

task buildDockerTestCentOS5x64 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker CentOS 5 test container'
        buildDockerContainer('test-centos5-x64')
    }
}

task buildDockerTestCentOS6x32 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker CentOS 6 test container'
        buildDockerContainer('test-centos6-x32')
    }
}

task buildDockerTestCentOS6x64 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker CentOS 6 test container'
        buildDockerContainer('test-centos6-x64')
    }
}

task buildDockerTestCentOS7 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker CentOS 7 test container'
        buildDockerContainer('test-centos7')
    }
}

task buildDockerTestUbuntu1204 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker ubuntu 12.04 test container'
        buildDockerContainer('test-ubuntu12.04')
    }
}

task buildDockerTestUbuntu1404 {
    dependsOn determineDockerAvailable

    doLast {
        println 'Build Docker ubuntu 14.04 test container'
        buildDockerContainer('test-ubuntu14.04')
    }
}
